<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.1post4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="(1024, 768)" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="game" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="maze_game" plugin="None">
        <Param val="# Before Experiment&amp;#10;&amp;#10;import random&amp;#10;from psychopy import visual, event, core&amp;#10;&amp;#10;# Colors&amp;#10;WALL_COLOR = (-1, -1, -1)  # black&amp;#10;PATH_COLOR = (1, 1, 1)     # white&amp;#10;AGENT_COLOR = (-1, -1, 1)  # blue&amp;#10;GOAL_COLOR = (1, -1, -1)   # red&amp;#10;&amp;#10;# Maze class definition here&amp;#10;class Maze:&amp;#10;    def __init__(self, size=8):&amp;#10;        self.size = size&amp;#10;        self.maze = [[1] * (2 * size + 1) for _ in range(2 * size + 1)]&amp;#10;        self.visited = set()&amp;#10;        self.goal_location = None&amp;#10;        self.agent_location = None &amp;#10;        self.walls = set()&amp;#10;&amp;#10;    def generate_maze(self):&amp;#10;        start = (random.randint(0, self.size - 1) * 2 + 1, random.randint(0, self.size - 1) * 2 + 1)&amp;#10;        self.maze[start[1]][start[0]] = 0&amp;#10;        self.walk_maze(start)&amp;#10;&amp;#10;        for x in range(1, self.size * 2, 2):&amp;#10;            for y in range(1, self.size * 2, 2):&amp;#10;                self.walls.add((x, y))&amp;#10;&amp;#10;        for _ in range(4):&amp;#10;            if not self.walls:&amp;#10;                break&amp;#10;            wall = random.choice(list(self.walls))&amp;#10;            self.maze[wall[1]][wall[0]] = 0&amp;#10;            self.walls.remove(wall)&amp;#10;&amp;#10;        self.goal_location = (random.randint(0, self.size - 1) * 2 + 1, random.randint(0, self.size - 1) * 2 + 1)&amp;#10;&amp;#10;        while True:&amp;#10;            agent_start = (random.randint(0, self.size - 1) * 2 + 1, random.randint(0, self.size - 1) * 2 + 1)&amp;#10;            if agent_start != self.goal_location:&amp;#10;                self.agent_location = agent_start&amp;#10;                break&amp;#10;&amp;#10;        return self.maze&amp;#10;&amp;#10;    def walk_maze(self, s):&amp;#10;        self.visited.add(s)&amp;#10;        neighbors = self.neighbors(s)&amp;#10;        random.shuffle(neighbors)&amp;#10;&amp;#10;        for n in neighbors:&amp;#10;            if n not in self.visited:&amp;#10;                self.remove_wall(s, n)&amp;#10;                self.walk_maze(n)&amp;#10;&amp;#10;    def neighbors(self, s):&amp;#10;        x, y = s&amp;#10;        potential_neighbors = [(x-2, y), (x+2, y), (x, y-2), (x, y+2)]  # همسایه‌های پتانسیل&amp;#10;&amp;#10;        neighbors = []&amp;#10;        for n in potential_neighbors:&amp;#10;            nx, ny = n&amp;#10;            if 0 &lt;= nx &lt; self.size * 2 + 1 and 0 &lt;= ny &lt; self.size * 2 + 1:&amp;#10;            # بررسی می‌کند که همسایه‌ها داخل محدوده ماز هستند&amp;#10;                neighbors.append((nx, ny))&amp;#10;&amp;#10;        return neighbors  # بازگرداندن لیستی از همسایه‌ها&amp;#10;&amp;#10;    def remove_wall(self, s, n):&amp;#10;        # Definition of remove_wall function&amp;#10;        pass&amp;#10;&amp;#10;    # Other functions (generate_maze, move_agent, etc.) go here" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;import {core, event, visual} from 'psychopy';&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;WALL_COLOR = [(- 1), (- 1), (- 1)];&amp;#10;PATH_COLOR = [1, 1, 1];&amp;#10;AGENT_COLOR = [(- 1), (- 1), 1];&amp;#10;GOAL_COLOR = [1, (- 1), (- 1)];&amp;#10;class Maze {&amp;#10;    constructor(size = 8) {&amp;#10;        this.size = size;&amp;#10;        this.maze = function () {&amp;#10;    var _pj_a = [], _pj_b = util.range(((2 * size) + 1));&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var _ = _pj_b[_pj_c];&amp;#10;        _pj_a.push(([1] * ((2 * size) + 1)));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;        this.visited = set();&amp;#10;        this.goal_location = null;&amp;#10;        this.agent_location = null;&amp;#10;        this.walls = set();&amp;#10;    }&amp;#10;    generate_maze() {&amp;#10;        var agent_start, start, wall;&amp;#10;        start = [((Math.random.randint(0, (this.size - 1)) * 2) + 1), ((Math.random.randint(0, (this.size - 1)) * 2) + 1)];&amp;#10;        this.maze[start[1]][start[0]] = 0;&amp;#10;        this.walk_maze(start);&amp;#10;        for (var x, _pj_c = 0, _pj_a = util.range(1, (this.size * 2), 2), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            x = _pj_a[_pj_c];&amp;#10;            for (var y, _pj_f = 0, _pj_d = util.range(1, (this.size * 2), 2), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                y = _pj_d[_pj_f];&amp;#10;                this.walls.add([x, y]);&amp;#10;            }&amp;#10;        }&amp;#10;        for (var _, _pj_c = 0, _pj_a = util.range(4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            _ = _pj_a[_pj_c];&amp;#10;            if ((! this.walls)) {&amp;#10;                break;&amp;#10;            }&amp;#10;            wall = Math.random.choice(list(this.walls));&amp;#10;            this.maze[wall[1]][wall[0]] = 0;&amp;#10;            this.walls.remove(wall);&amp;#10;        }&amp;#10;        this.goal_location = [((Math.random.randint(0, (this.size - 1)) * 2) + 1), ((Math.random.randint(0, (this.size - 1)) * 2) + 1)];&amp;#10;        while (true) {&amp;#10;            agent_start = [((Math.random.randint(0, (this.size - 1)) * 2) + 1), ((Math.random.randint(0, (this.size - 1)) * 2) + 1)];&amp;#10;            if ((agent_start !== this.goal_location)) {&amp;#10;                this.agent_location = agent_start;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return this.maze;&amp;#10;    }&amp;#10;    walk_maze(s) {&amp;#10;        var neighbors;&amp;#10;        this.visited.add(s);&amp;#10;        neighbors = this.neighbors(s);&amp;#10;        Math.random.shuffle(neighbors);&amp;#10;        for (var n, _pj_c = 0, _pj_a = neighbors, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            n = _pj_a[_pj_c];&amp;#10;            if ((! _pj.in_es6(n, this.visited))) {&amp;#10;                this.remove_wall(s, n);&amp;#10;                this.walk_maze(n);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    neighbors(s) {&amp;#10;        var neighbors, nx, ny, potential_neighbors, x, y;&amp;#10;        [x, y] = s;&amp;#10;        potential_neighbors = [[(x - 2), y], [(x + 2), y], [x, (y - 2)], [x, (y + 2)]];&amp;#10;        neighbors = [];&amp;#10;        for (var n, _pj_c = 0, _pj_a = potential_neighbors, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            n = _pj_a[_pj_c];&amp;#10;            [nx, ny] = n;&amp;#10;            if ((((0 &lt;= nx) &amp;&amp; (nx &lt; ((this.size * 2) + 1))) &amp;&amp; ((0 &lt;= ny) &amp;&amp; (ny &lt; ((this.size * 2) + 1))))) {&amp;#10;                neighbors.push([nx, ny]);&amp;#10;            }&amp;#10;        }&amp;#10;        return neighbors;&amp;#10;    }&amp;#10;    remove_wall(s, n) {&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Begin Experiment&amp;#10;&amp;#10;# Create a window&amp;#10;win = visual.Window([800, 600], fullscr=False, color=PATH_COLOR)&amp;#10;&amp;#10;# Initialize the maze&amp;#10;maze = Maze(size=8)&amp;#10;maze.generate_maze()&amp;#10;&amp;#10;# Set the size of the cells&amp;#10;cell_size = 40&amp;#10;&amp;#10;# Clock to control the frame rate&amp;#10;clock = core.Clock()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="win = new visual.Window([800, 600], {&quot;fullscr&quot;: false, &quot;color&quot;: PATH_COLOR});&amp;#10;maze = new Maze({&quot;size&quot;: 8});&amp;#10;maze.generate_maze();&amp;#10;cell_size = 40;&amp;#10;clock = new util.Clock();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.eventManager.clearEvents();&amp;#10;function draw_maze() {&amp;#10;    var agent, ax, ay, color, goal, gx, gy, rect;&amp;#10;    for (var y, _pj_c = 0, _pj_a = util.range(maze.maze.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        y = _pj_a[_pj_c];&amp;#10;        for (var x, _pj_f = 0, _pj_d = util.range(maze.maze[0].length), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;            x = _pj_d[_pj_f];&amp;#10;            color = ((maze.maze[y][x] === 1) ? WALL_COLOR : PATH_COLOR);&amp;#10;            rect = new visual.Rect(psychoJS.window, {&quot;width&quot;: cell_size, &quot;height&quot;: cell_size, &quot;fillColor&quot;: color});&amp;#10;            rect.pos = [((x * cell_size) - (maze.size * cell_size)), ((y * cell_size) - (maze.size * cell_size))];&amp;#10;            rect.draw();&amp;#10;        }&amp;#10;    }&amp;#10;    [ax, ay] = maze.agent_location;&amp;#10;    agent = new visual.Circle(psychoJS.window, {&quot;radius&quot;: (cell_size / 2), &quot;fillColor&quot;: AGENT_COLOR});&amp;#10;    agent.pos = [((ax * cell_size) - (maze.size * cell_size)), ((ay * cell_size) - (maze.size * cell_size))];&amp;#10;    agent.draw();&amp;#10;    [gx, gy] = maze.goal_location;&amp;#10;    goal = new visual.Rect(psychoJS.window, {&quot;width&quot;: cell_size, &quot;height&quot;: cell_size, &quot;fillColor&quot;: GOAL_COLOR});&amp;#10;    goal.pos = [((gx * cell_size) - (maze.size * cell_size)), ((gy * cell_size) - (maze.size * cell_size))];&amp;#10;    goal.draw();&amp;#10;}&amp;#10;draw_maze();&amp;#10;psychoJS.window.flip();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Begin Routine&amp;#10;&amp;#10;# Clear any prior events&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# Draw the initial maze and agent&amp;#10;def draw_maze():&amp;#10;    for y in range(len(maze.maze)):&amp;#10;        for x in range(len(maze.maze[0])):&amp;#10;            color = WALL_COLOR if maze.maze[y][x] == 1 else PATH_COLOR&amp;#10;            rect = visual.Rect(win, width=cell_size, height=cell_size, fillColor=color)&amp;#10;            rect.pos = [x * cell_size - (maze.size * cell_size), y * cell_size - (maze.size * cell_size)]&amp;#10;            rect.draw()&amp;#10;&amp;#10;    # Draw the agent&amp;#10;    ax, ay = maze.agent_location&amp;#10;    agent = visual.Circle(win, radius=cell_size / 2, fillColor=AGENT_COLOR)&amp;#10;    agent.pos = [ax * cell_size - (maze.size * cell_size), ay * cell_size - (maze.size * cell_size)]&amp;#10;    agent.draw()&amp;#10;&amp;#10;    # Draw the goal&amp;#10;    gx, gy = maze.goal_location&amp;#10;    goal = visual.Rect(win, width=cell_size, height=cell_size, fillColor=GOAL_COLOR)&amp;#10;    goal.pos = [gx * cell_size - (maze.size * cell_size), gy * cell_size - (maze.size * cell_size)]&amp;#10;    goal.draw()&amp;#10;&amp;#10;# Initial maze drawing&amp;#10;draw_maze()&amp;#10;win.flip()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Each Frame&amp;#10;&amp;#10;# Get the pressed keys&amp;#10;keys = event.getKeys()&amp;#10;&amp;#10;# Move agent based on key press&amp;#10;if 'w' in keys:&amp;#10;    maze.move_agent('up')&amp;#10;elif 's' in keys:&amp;#10;    maze.move_agent('down')&amp;#10;elif 'a' in keys:&amp;#10;    maze.move_agent('left')&amp;#10;elif 'd' in keys:&amp;#10;    maze.move_agent('right')&amp;#10;&amp;#10;# Redraw the maze and agent in the new position&amp;#10;draw_maze()&amp;#10;win.flip()&amp;#10;&amp;#10;# Check if agent has reached the goal&amp;#10;if maze.agent_location == maze.goal_location:&amp;#10;    thisExp.addData('goal_reached', True)&amp;#10;    continueRoutine = False  # End the current routine" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;    maze.move_agent(&quot;up&quot;);&amp;#10;} else {&amp;#10;    if (_pj.in_es6(&quot;s&quot;, keys)) {&amp;#10;        maze.move_agent(&quot;down&quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;            maze.move_agent(&quot;left&quot;);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                maze.move_agent(&quot;right&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;draw_maze();&amp;#10;psychoJS.window.flip();&amp;#10;if ((maze.agent_location === maze.goal_location)) {&amp;#10;    psychoJS.experiment.addData(&quot;goal_reached&quot;, true);&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# End Experiment&amp;#10;&amp;#10;# Close the window&amp;#10;win.close()&amp;#10;&amp;#10;# Quit PsychoPy&amp;#10;core.quit()" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="psychoJS.window.close();&amp;#10;core.quit();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;final_agent_position&quot;, maze.agent_location);&amp;#10;psychoJS.experiment.addData(&quot;goal_position&quot;, maze.goal_location);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# End Routine&amp;#10;&amp;#10;# Log the final position of the agent&amp;#10;thisExp.addData('final_agent_position', maze.agent_location)&amp;#10;thisExp.addData('goal_position', maze.goal_location)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="maze_game" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
